ad_page_contract {
    Add/Edit form for table "bt_versions"
    @author Generated by formwizard.tcl
    @creation-date March 26, 2002
    @cvs-id $Id$
} {
    {version_id ""}
    {return_url ""}
    cancel:optional
}

if { [exists_and_not_null cancel] } {
    ad_returnredirect $return_url
    ad_script_abort
}

set project_name [bt_conn project_name]
set package_id [ad_conn package_id]
set package_key [ad_conn package_key]

if { [info exists component_id] } {
    set page_title "Edit Version"
} else {
    set page_title "Add Version"
}
set context_bar [ad_context_bar [list $return_url "Versions"] $page_title]


# TODO: check that the handling of the primary key is okay.  If there is
# no primary key and you're only inserting, you can just ignore it.  
# Add handling for any other incoming URL variables that should become part of the form.

template::form create version

template::element create version version_id -widget hidden
template::element create version return_url -datatype text -widget hidden -value $return_url

template::element create version version_name -label "Version name" -widget text -datatype text -html { size 50 }
template::element create version description -label "Description" -widget textarea -datatype text -optional -html { cols 50 rows 8 }
template::element create version supported_platforms -label "Supported platforms" -widget text -datatype text \
        -html { size 50 } -optional  
template::element create version maintainer -label "Maintainer" -widget select -datatype integer \
        -options [concat {{ "--None--" "" }} [db_list_of_lists users { select first_names || ' ' || last_name, user_id from cc_users }]] -optional
template::element create version anticipated_freeze_date -label "Anticipated freeze date" -widget date -datatype date -optional -format "MONTH DD, YYYY" 
template::element create version anticipated_release_date -label "Anticipated release date" -widget date -datatype date -optional -format "MONTH DD, YYYY" 
template::element create version assignable_p -label "Assignable?" -widget select -datatype text -optional  -options {{Yes t} {No f}}

template::element create version insert_or_update -widget hidden -datatype text

if { [template::form is_request version] } {
    if {[empty_string_p $version_id]} {    
	set insert_or_update insert
	template::element set_properties version insert_or_update -value insert
	set version_id [db_nextval "acs_object_id_seq"]
	template::element set_properties version version_id -value $version_id
    } else {
	set insert_or_update update
	template::element set_properties version insert_or_update -value update
	db_1row get_current_values "
	    select version_id, version_name, description, to_char(anticipated_freeze_date, 'YYYY MM DD HH24 MI') as anticipated_freeze_date, to_char(anticipated_release_date, 'YYYY MM DD HH24 MI') as anticipated_release_date, maintainer, supported_platforms, assignable_p
	      from bt_versions
	     where version_id = :version_id
	"
        template::element set_properties version version_id -value $version_id
        template::element set_properties version version_name -value $version_name
        template::element set_properties version description -value $description
        template::element set_properties version anticipated_freeze_date -value $anticipated_freeze_date
        template::element set_properties version anticipated_release_date -value $anticipated_release_date
        template::element set_properties version maintainer -value $maintainer
        template::element set_properties version supported_platforms -value $supported_platforms
        template::element set_properties version assignable_p -value $assignable_p


    }
}

set insert_or_update [template::element::get_value version insert_or_update]

if { [template::form is_valid version] } {
    # valid form submission
    set version_id [template::element::get_value version version_id]
    set project_id [ad_conn package_id]
    set version_name [template::element::get_value version version_name]
    set description [template::element::get_value version description]
    set anticipated_freeze_date [template::element::get_value version anticipated_freeze_date]
    if {![empty_string_p $anticipated_freeze_date]} {
	set anticipated_freeze_date [template::util::date::get_property sql_date $anticipated_freeze_date]
    } else {	
	set anticipated_freeze_date NULL
    }
    set anticipated_release_date [template::element::get_value version anticipated_release_date]
    if {![empty_string_p $anticipated_release_date]} {
	set anticipated_release_date [template::util::date::get_property sql_date $anticipated_release_date]
    } else {	
	set anticipated_release_date NULL
    }
    set maintainer [template::element::get_value version maintainer]
    set supported_platforms [template::element::get_value version supported_platforms]
    set assignable_p [template::element::get_value version assignable_p]

    if {$insert_or_update == "insert"} {
	if {[db_0or1row check_exists "
	    select 1 from bt_versions where version_id = :version_id
        "]} {
	    # detected a double form submission - you can return
	    # an error if you want, but it's not really necessary
	} else {
	    db_dml insert_row "
	        insert into bt_versions (version_id, project_id, version_name, description, anticipated_freeze_date, anticipated_release_date, maintainer, supported_platforms, assignable_p)
	        values (:version_id, :project_id, :version_name, :description, $anticipated_freeze_date, $anticipated_release_date, :maintainer, :supported_platforms, :assignable_p)
	    "
	}
    } else {
	db_dml update_row "
	    update bt_versions
	    set version_id=:version_id, project_id=:project_id, version_name=:version_name, description=:description, anticipated_freeze_date=$anticipated_freeze_date, anticipated_release_date=$anticipated_release_date, maintainer=:maintainer, supported_platforms=:supported_platforms, assignable_p=:assignable_p
	    where version_id = :version_id
	"
    }

    ad_returnredirect $return_url
    ad_script_abort
}

